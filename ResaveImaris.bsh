import java.io.File;
import java.io.IOException;
import java.util.List;

import bdv.img.imaris.Imaris;
import bdv.spimdata.SpimDataMinimal;
import bdv.spimdata.XmlIoSpimDataMinimal;
import fiji.util.gui.GenericDialogPlus;
import ij.IJ;
import ij.ImageJ;
import ij.ImagePlus;
import ij.io.FileSaver;
import mpicbg.spim.data.SpimDataException;
import mpicbg.spim.data.generic.sequence.BasicImgLoader;
import mpicbg.spim.data.generic.sequence.BasicViewSetup;
import mpicbg.spim.data.sequence.TimePoint;
import mpicbg.spim.data.sequence.ViewId;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.img.display.imagej.ImageJFunctions;

// written by Stephan Preibisch & Friedrich Preusser
// Berlin, 11 Apr 2019
GenericDialogPlus gd = new GenericDialogPlus( "Save options" );

gd.addFileField( "Select Imaris file", "", 100 );

gd.showDialog();
if ( gd.wasCanceled() )
	return;

File file = new File( gd.getNextString() );

if ( !file.exists() )
{
	IJ.log( "File " + file + " does not exist." );
	return;
}
else
{
	IJ.log( "Opening " + file );
}

SpimDataMinimal spimData = null;
try
{
	spimData = Imaris.openIms( file.getAbsolutePath() );
}
catch ( Exception e ) { e.printStackTrace(); }

if ( spimData == null )
{
	IJ.log( "File " + file + " could not be opened." );
	return;
}

// display
//BigDataViewer.open( spimData, "test", new ProgressWriterIJ(), ViewerOptions.options() );

List viewSetups = spimData.getSequenceDescription().getViewSetupsOrdered();
List timepoints = spimData.getSequenceDescription().getTimePoints().getTimePointsOrdered();

IJ.log( "Found " + viewSetups.size() + " viewsetups." );
IJ.log( "Found " + timepoints.size() + " timepoints." );

gd = new GenericDialogPlus( "Save options" );

gd.addDirectoryField( "Directory", file.getParent(), 50 );

if ( timepoints.size() > 1 )
{
	gd.addSlider( "Start timepoint", timepoints.get( 0 ).getId(), timepoints.get( timepoints.size() - 1 ).getId(), 0 );
	gd.addSlider( "End timepoint", timepoints.get( 0 ).getId(), timepoints.get( timepoints.size() - 1 ).getId(), timepoints.get( timepoints.size() - 1 ).getId() );
}

gd.showDialog();
if ( gd.wasCanceled() )
	return;

String saveDir = defaultDir = gd.getNextString();

int startTp, endTp;

if ( timepoints.size() > 1 )
{
	startTp = (int)Math.round( gd.getNextNumber() );
	endTp = (int)Math.round( gd.getNextNumber() );
}
else
{
	startTp = endTp = timepoints.get( 0 ).getId();
}

BasicImgLoader imgLoader = spimData.getSequenceDescription().getImgLoader();

for ( TimePoint tp : timepoints )
{
	if ( tp.getId() >= startTp && tp.getId() <= endTp )
	{
		IJ.log( "Exporting timepoint " + tp.getId() );

		for ( BasicViewSetup vs : viewSetups )
		{
			IJ.log( "Exporting viewsetup " + vs.getId() );
			ViewId v = new ViewId( tp.getId(), vs.getId() );

			if ( spimData.getSequenceDescription().getViewDescriptions().get( v ).isPresent() )
			{
				RandomAccessibleInterval img = imgLoader.getSetupImgLoader( vs.getId() ).getImage( tp.getId(), 0, null );
				ImagePlus imp = ImageJFunctions.wrap( img, "tp_" + tp.getId() + "_vs_" + vs.getId() );
				String saveFile =  new File( saveDir, imp.getTitle() ).getAbsolutePath() + ".tif";
				new FileSaver( imp ).saveAsTiffStack( saveFile );

				IJ.log( "Saved file " + saveFile );
			}
			else
			{
				IJ.log( "Exporting viewsetup " + vs.getName() + " IS NOT PRESENT." );
			}
		}
	}
	else
	{
		IJ.log( "Skipping timepoint " + tp.getId() );
	}
}
